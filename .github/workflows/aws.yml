name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create .env file
      run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker images
      run: docker compose build && docker compose push
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Set up ECS CLI
      run: |
        sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
        sudo chmod +x /usr/local/bin/ecs-cli

    - name: Generate ECS Container Definitions
      run: ecs-cli compose --file docker-compose.yml create --json > terraform/ecs_container_definitions.json
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan

    - name: Apply Terraform changes
      working-directory: ./terraform
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
