name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  provision_infra:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: ./terraform
      run: terraform plan

    - name: Apply Terraform changes
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: ./terraform
      run: terraform apply -auto-approve

    - name: Capture ECS Cluster and Service Name
      id: outputs
      working-directory: ./terraform
      run: |
        echo "CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
        echo "SERVICE_NAME=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV
    
    - name: Use Cluster and Service Name
      run: |
        echo "Deploying to ECS Cluster: $CLUSTER_NAME"
        echo "ECS Service Name: $SERVICE_NAME"
    
    - name: Upload Terraform State
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: terraform-state
        path: ./terraform/terraform.tfstate

    - name: Destroy Infrastructure
      if: always()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: ./terraform
      run: terraform destroy -auto-approve

  build_and_push:
    runs-on: ubuntu-latest
    needs: provision_infra

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    - name: Create .env file
      run: |
        echo "DbNAME=${{ secrets.DbNAME }}" >> .env
        echo "DbUSER=${{ secrets.DbUSER }}" >> .env
        echo "DbPASSWORD=${{ secrets.DbPASSWORD }}" >> .env
        echo "DbHOST=${{ secrets.DbHOST }}" >> .env
        echo "DbPORT=${{ secrets.DbPORT }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=${{ secrets.DEBUG }}" >> .env
        echo "DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}" >> .env
        echo "DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" >> .env
        echo "DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}" >> .env

    - name: Log in to ECR
      id: ecr_login
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build and push Docker images
      run: | 
        docker-compose build devblog
        docker tag devblog:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/devblog-repo:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/devblog-repo:latest

        docker-compose build postgresdb
        docker tag postgresdb:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/postgresdb-repo:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/postgresdb-repo:latest
    
    # Health check for ECS services
    - name: Check ECS Service Health
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        REGION="${{ secrets.AWS_REGION }}"
        
        # Set timeout and retry interval (e.g., 10 minutes and 30 seconds interval)
        TIMEOUT=600
        INTERVAL=30
        ELAPSED=0

        while [ $ELAPSED -lt $TIMEOUT ]; do
          STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --region $REGION --query 'services[0].deployments[0].rolloutState' --output text)
          RUNNING_TASKS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --region $REGION --query 'services[0].runningCount' --output text)
          DESIRED_TASKS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --region $REGION --query 'services[0].desiredCount' --output text)
          
          echo "ECS Service Status: $STATUS"
          echo "Running Tasks: $RUNNING_TASKS / $DESIRED_TASKS"
          
          if [ "$STATUS" == "COMPLETED" ] && [ "$RUNNING_TASKS" -eq "$DESIRED_TASKS" ]; then
            echo "ECS service is healthy and running."
            exit 0
          fi
          
          echo "Waiting for ECS service to be healthy..."
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done

        echo "ECS service did not become healthy in time."
        exit 1
    
    # Download the Terraform state for the destroy step
    # - name: Download Terraform State
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: terraform-state
    #     path: ./terraform

    # - name: Destroy Infrastructure
    #   if: always()
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   working-directory: ./terraform
    #   run: terraform destroy -auto-approve