name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create .env file
      run: |
        echo "DbNAME=${{ secrets.DbNAME }}" >> .env
        echo "DbUSER=${{ secrets.DbUSER }}" >> .env
        echo "DbPASSWORD=${{ secrets.DbPASSWORD }}" >> .env
        echo "DbHOST=${{ secrets.DbHOST }}" >> .env
        echo "DbPORT=${{ secrets.DbPORT }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=${{ secrets.DEBUG }}" >> .env
        echo "DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}" >> .env
        echo "DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" >> .env
        echo "DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}" >> .env

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        echo 'import yaml
        import subprocess

        def build_and_push_images(docker_compose_file):
          with open(docker_compose_file, "r") as f:
            data = yaml.safe_load(f)

          services = data["services"]

          for service_name, service_config in services.items():
            build_context = service_config.get("build", ".")
            image_name = f"{DOCKERHUB_USERNAME}/{service_name}:latest"

            subprocess.run(["docker", "build", "-t", image_name, build_context])
            subprocess.run(["docker", "push", image_name])

        # Example usage in GitHub Actions:
        if __name__ == "__main__":
          build_and_push_images("docker-compose.yml")' > build_and_push.py
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Install Terraform
  #     uses: hashicorp/setup-terraform@v2

  #   - name: Terraform Format Check
  #     working-directory: ./terraform
  #     run: terraform fmt -check

  #   - name: Terraform Init
  #     working-directory: ./terraform
  #     run: terraform init

  #   - name: Terraform Plan
  #     working-directory: ./terraform
  #     run: terraform plan

  #   - name: Apply Terraform changes
  #     working-directory: ./terraform
  #     run: terraform apply -auto-approve
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
